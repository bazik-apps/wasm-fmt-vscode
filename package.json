{
	"name": "wasm-fmt",
	"displayName": "wasm fmt",
	"description": "Code Formatter powered by WebAssembly",
	"author": "magic-akari",
	"publisher": "wasm-fmt",
	"version": "0.5.2",
	"license": "MIT",
	"repository": {
		"type": "git",
		"url": "https://github.com/wasm-fmt/wasm-fmt-vscode.git"
	},
	"engines": {
		"vscode": "^1.88.0"
	},
	"packageManager": "pnpm@9.15.0",
	"categories": [
		"Formatters"
	],
	"icon": "images/icon.png",
	"activationEvents": [
		"onStartupFinished"
	],
	"browser": "./out/extension.js",
	"scripts": {
		"vscode:prepublish": "pnpm run package",
		"compile": "pnpm run check-types && pnpm run lint && node --experimental-transform-types esbuild.ts",
		"watch": "npm-run-all -p watch:*",
		"watch:esbuild": "node --experimental-transform-types esbuild.ts --watch",
		"watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
		"package": "pnpm run check-types && pnpm run lint && node --experimental-transform-types esbuild.ts --production",
		"compile-tests": "tsc -p . --outDir out",
		"watch-tests": "tsc -p . -w --outDir out",
		"pretest": "pnpm run compile-tests && pnpm run compile && pnpm run lint",
		"check-types": "tsc --noEmit",
		"lint": "biome lint ./src",
		"test": "vscode-test"
	},
	"devDependencies": {
		"@biomejs/biome": "^1.9.4",
		"@tsconfig/node-lts": "^22.0.1",
		"@tsconfig/node-ts": "^23.6.0",
		"@tsconfig/strictest": "^2.0.5",
		"@types/mocha": "^10.0.10",
		"@types/node": "^22.13.11",
		"@types/vscode": "^1.98.0",
		"@vscode/test-electron": "^2.4.1",
		"esbuild": "^0.25.1",
		"npm-run-all": "^4.1.5",
		"typescript": "^5.8.2"
	},
	"dependencies": {
		"@wasm-fmt/clang-format": "^19.1.7",
		"@wasm-fmt/dart_fmt": "^0.2.0",
		"@wasm-fmt/gofmt": "^0.4.9",
		"@wasm-fmt/lua_fmt": "^0.1.0",
		"@wasm-fmt/ruff_fmt": "^0.9.7",
		"@wasm-fmt/sql_fmt": "^0.1.0",
		"@wasm-fmt/web_fmt": "^0.1.13",
		"@wasm-fmt/yamlfmt": "^0.0.3",
		"@wasm-fmt/zig_fmt": "^0.0.5"
	},
	"keywords": [
		"prettier",
		"formatter",
		"web",
		"wasm",
		"browser"
	],
	"contributes": {
		"configuration": {
			"properties": {
				"clang-format.style": {
					"type": "string",
					"default": "file",
					"description": "clang-format style.(-style=value, value can be file, LLVM, Google, Chromium, Mozilla, WebKit or json configure)"
				},
				"clang-format.fallbackStyle": {
					"type": "string",
					"default": "LLVM",
					"description": "clang-format fallback style.(-fallback-style=value, value can be none, LLVM, Google, Chromium, Mozilla, WebKit)"
				}
			}
		}
	},
	"type": "module"
}
